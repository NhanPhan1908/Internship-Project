import cv2
import torch
import pymongo
import numpy as np
from PyQt6.QtWidgets import QApplication, QMessageBox
from PyQt6.QtGui import QImage, QPixmap
from facenet_pytorch import InceptionResnetV1, MTCNN
from torchvision import transforms
from PIL import Image
import sys
from ui_employee_register import EmployeeRegisterUI  # Import UI

# üéØ Connect MongoDB
try:
    client = pymongo.MongoClient("mongodb://localhost:27017/")
    db = client["Intern"]
    collection = db["employees"]
    print("[INFO] K·∫øt n·ªëi MongoDB th√†nh c√¥ng!")
except Exception as e:
    print(f"[ERROR] Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB: {e}")
    sys.exit(1)

# üñ• Check GPU
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(f"[INFO] ƒêang s·ª≠ d·ª•ng: {'GPU' if torch.cuda.is_available() else 'CPU'}")

# Init Model
try:
    mtcnn = MTCNN(keep_all=False, device=device)
    facenet = InceptionResnetV1(pretrained="casia-webface").to(device).eval()
    print("[INFO] Model nh·∫≠n di·ªán khu√¥n m·∫∑t ƒë√£ t·∫£i th√†nh c√¥ng!")
except Exception as e:
    print(f"[ERROR] L·ªói t·∫£i model: {e}")
    sys.exit(1)

# üìå Standardization
def fixed_image_standardization(image_tensor):
    return (image_tensor - 127.5) / 128.0 # chu·∫©n h√≥a v·ªÅ 127.5

def trans(img):
    transform = transforms.Compose([
        transforms.ToTensor(),
        fixed_image_standardization
    ])
    return transform(img)

class EmployeeRegister(EmployeeRegisterUI):
    def __init__(self):
        super().__init__()

        # Start camera
        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ m·ªü camera!")
            print("[ERROR] Kh√¥ng th·ªÉ m·ªü camera!")
            sys.exit(1)

        self.timer_id = self.startTimer(30)  # update camera 30ms/frame
        self.capture_button.clicked.connect(self.capture_face)  # connect button

    def timerEvent(self, event):
        """ C·∫≠p nh·∫≠t camera l√™n UI """
        ret, frame = self.cap.read()
        if ret:
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Chuy·ªÉn ƒë·ªïi m√†u
            boxes, _ = mtcnn.detect(frame)  # Ph√°t hi·ªán khu√¥n m·∫∑t
            if boxes is not None:
                for box in boxes:
                    x1, y1, x2, y2 = map(int, box)  # L·∫•y t·ªça ƒë·ªô khu√¥n m·∫∑t
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)  # V·∫Ω khung

            h, w, ch = frame.shape
            # Convert to QImage
            qimg = QImage(frame.data, w, h, ch * w, QImage.Format.Format_RGB888) #(frame.data, width, heigh, bytesPerLine, format)
            self.camera_label.setPixmap(QPixmap.fromImage(qimg))  # Hi·ªÉn th·ªã camera

    def capture_face(self):
        """ Ch·ª•p ·∫£nh, tr√≠ch xu·∫•t embedding & l∆∞u v√†o database """
        ret, frame = self.cap.read() # L·∫•y ·∫£nh t·ª´ camera
        ## N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c ·∫£nh, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        if not ret:
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ ch·ª•p ·∫£nh t·ª´ camera!")
            print("[ERROR] Kh√¥ng th·ªÉ ch·ª•p ·∫£nh t·ª´ camera!")
            return

        name = self.input_name.text().strip()  # L·∫•y t√™n
        emp_id = self.input_id.text().strip()  # L·∫•y ID nh√¢n vi√™n

        if not name or not emp_id:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            print("[WARNING] Thi·∫øu th√¥ng tin nh√¢n vi√™n!")
            return

        print(f"[INFO] ƒêang x·ª≠ l√Ω nh·∫≠n di·ªán khu√¥n m·∫∑t cho nh√¢n vi√™n: {name} (ID: {emp_id})")

        # Chuy·ªÉn ·∫£nh t·ª´ OpenCV sang PIL
        # N·∫øu kh√¥ng chuy·ªÉn ƒë·ªïi, s·∫Ω kh√¥ng th·ªÉ s·ª≠ d·ª•ng MTCNN ƒë·ªÉ ph√°t hi·ªán khu√¥n m·∫∑t
        # Chuy·ªÉn ƒë·ªïi t·ª´ BGR (OpenCV) sang RGB (PIL)
        image = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        
        # üü¢ Detect face v√† l·∫•y khu√¥n m·∫∑t ƒë√£ c·∫Øt
        face = mtcnn(image)

        if face is None:
            QMessageBox.warning(self, "L·ªói", "Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t!")
            print("[ERROR] Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t!")
            return

        print("[INFO] ƒê√£ ph√°t hi·ªán khu√¥n m·∫∑t, tr√≠ch xu·∫•t embedding...")

        try:
            # üü¢ CHUY·ªÇN face t·ª´ Tensor ‚ûù NumPy ndarray (c·∫ßn cho Facenet)
            face = face.permute(1, 2, 0).numpy()  # Chuy·ªÉn t·ª´ (C, H, W) ‚Üí (H, W, C)
    
            # Chu·∫©n h√≥a v√† tr√≠ch xu·∫•t embedding
            face = trans(face)  # Chuy·ªÉn th√†nh Tensor chu·∫©n h√≥a
            face = face.unsqueeze(0).to(device)  # Th√™m batch dimension
            with torch.no_grad():
                embedding = facenet(face).cpu().numpy()

            print(f"[INFO] Embedding shape: {embedding.shape}")
        except Exception as e:
            print(f"[ERROR] L·ªói tr√≠ch xu·∫•t embedding: {e}")
            QMessageBox.critical(self, "L·ªói", "L·ªói khi tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng khu√¥n m·∫∑t!")
            return

        # Ki·ªÉm tra ID nh√¢n vi√™n
        existing_employee = collection.find_one({"employee_id": emp_id})
        if existing_employee:
            QMessageBox.warning(self, "L·ªói", "M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i!")
            print("[ERROR] M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i trong DB!")
            return

        # üìå L∆∞u v√†o database
        employee_data = {
            "employee_id": emp_id,
            "name": name,
            "embedding": embedding.tolist()
        }

        try:
            result = collection.insert_one(employee_data)
            if result.inserted_id:
                print(f"[SUCCESS] ƒê√£ l∆∞u v√†o MongoDB v·ªõi ID: {result.inserted_id}")
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ ƒëƒÉng k√Ω nh√¢n vi√™n: {name}!")
            else:
                print("[ERROR] Kh√¥ng th·ªÉ l∆∞u v√†o MongoDB!")
        except Exception as e:
            print(f"[ERROR] Kh√¥ng th·ªÉ l∆∞u v√†o MongoDB: {e}")
            QMessageBox.critical(self, "L·ªói", "L·ªói khi l∆∞u d·ªØ li·ªáu v√†o MongoDB!")

        self.input_name.clear()
        self.input_id.clear()

    def closeEvent(self, event):
        """ ƒê√≥ng camera khi tho√°t ·ª©ng d·ª•ng """
        self.cap.release()
        print("[INFO] Camera ƒë√£ ƒë√≥ng!")
        event.accept()

# üìå Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = EmployeeRegister()
    window.show()
    print("[INFO] ·ª®ng d·ª•ng ƒë√£ kh·ªüi ƒë·ªông!")
    sys.exit(app.exec())
